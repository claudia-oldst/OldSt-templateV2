version: 0.2
run-as: root

phases:
  install:
    runtime-versions:
      nodejs: 20
  pre_build:
    commands:
      - set -e
      - echo Installing source dependencies...
      - npm -v
      - npm install -g yarn
      - yarn -v
      - yarn install
      - npm run list-apps-dirs
      - echo "Contents of apps.txt:"
      - cat apps.txt
  build:
    commands:
      - set -e
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - for SERVICE_NAME in $(cat apps.txt); 
          do echo "Building $SERVICE_NAME..." ; 
          npm run build-${SERVICE_NAME} ;
          yarn --cwd dist/apps/${SERVICE_NAME} install ;
          docker build --no-cache --build-arg SERVICE_NAME=${SERVICE_NAME} -t ${PROJECT_NAME}-${ENVIRONMENT}-${SERVICE_NAME} -f BackendDockerfile . ;
          echo "Pushing image for $SERVICE_NAME to ECR..." ;
          docker tag ${PROJECT_NAME}-${ENVIRONMENT}-${SERVICE_NAME}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-${ENVIRONMENT}-${SERVICE_NAME}:latest ;
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-${ENVIRONMENT}-${SERVICE_NAME}:latest ;
          aws lambda update-function-code --function-name ${PROJECT_NAME}-${ENVIRONMENT}-${SERVICE_NAME} --image-uri ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-${ENVIRONMENT}-${SERVICE_NAME}:latest ;
        done
  post_build:
    commands:
      - set -e
cache:
  paths:
    - node_modules